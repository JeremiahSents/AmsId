package dev.sentomero.backend_ams.service.impl;

import dev.sentomero.backend_ams.repository.DeletedSerialNumberRepository;
import dev.sentomero.backend_ams.service.SerialNumberService;
import dev.sentomero.backend_ams.repository.KpClientRepository;
import jakarta.persistence.EntityManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;
import java.util.Optional;
import java.util.stream.Stream;

@Service
@Transactional
public class SerialNumberServiceImpl implements SerialNumberService {
    private static final long STARTING_SERIAL = 5000L;
    private static final long MAX_SERIAL = 99999L;

    private final KpClientRepository kpClientRepository;
    private final DeletedSerialNumberRepository deletedSerialRepository;
    private final EntityManager entityManager;

    @Autowired
    public SerialNumberServiceImpl(KpClientRepository kpClientRepository,
                                   DeletedSerialNumberRepository deletedSerialRepository,
                                   EntityManager entityManager) {
        this.kpClientRepository = kpClientRepository;
        this.deletedSerialRepository = deletedSerialRepository;
        this.entityManager = entityManager;
    }

    @Override
    @Transactional(isolation = Isolation.SERIALIZABLE)
    public Long generateSerialNumber() {
        // Create a pessimistic lock
        entityManager.createNativeQuery("SELECT pg_advisory_xact_lock(123456)").getSingleResult();

        // Get both current and deleted serial numbers
        Optional<Long> maxCurrentSerial = kpClientRepository.findHighestSerialNumber();
        Optional<Long> maxDeletedSerial = Optional.ofNullable(
                deletedSerialRepository.findAllDeletedSerials()
                        .stream()
                        .max(Long::compareTo)
                        .orElse(null)
        );

        // Find the highest between current and deleted
        long highestSerial = Stream.of(maxCurrentSerial, maxDeletedSerial)
                .filter(Optional::isPresent)
                .map(Optional::get)
                .max(Long::compareTo)
                .orElse(STARTING_SERIAL - 1);

        long nextSerial = highestSerial + 1;

        if (nextSerial > MAX_SERIAL) {
            throw new IllegalStateException("No available serial numbers in the valid range");
        }

        return nextSerial;
    }
}
